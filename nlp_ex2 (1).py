# -*- coding: utf-8 -*-
"""NLP_ex2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14z_lXUdwRachC3iISL8iT60ISjBx0V4-
"""

# install mpl-tc-fonts to visualize Traditional Chinese characters in the plot
!pip install git+https://github.com/Hsins/mpl-tc-fonts.git

# Commented out IPython magic to ensure Python compatibility.
import torch
import torch.nn.functional as F
import matplotlib.pyplot as plt # for making figures
# %matplotlib inline
import mpl_tc_fonts #for visualizing Traditional Chinese characters

# download the names.txt file from github
!wget https://raw.githubusercontent.com/Letieateat/Draft/main/names.txt

words = open('names.txt', 'r').read().splitlines()
#clean the text
import re
names= [re.sub('[\W_a-zA-Z0-9]', '', word).strip() for word in words]#remove spaces and non-character symbols from the data, using the whole dataset
print(names)

#In order to check the number of unique characters
# Flatten the list of names into a single string
all_characters = ''.join(names)

# Calculate the total number of tokens (total characters)
total_tokens = len(all_characters)

# Calculate the total number of types (unique characters)
total_types = len(set(all_characters))#=vocab_size

print("Total number of tokens (characters):", total_tokens)
print("Total number of types (unique characters):", total_types)

# build the vocabulary of characters and mappings to/from integers
chars = sorted(list(set(''.join(names))))
stoi = {s:i+1 for i,s in enumerate(chars)}
stoi['.'] = 0
itos = {i:s for s,i in stoi.items()}
print(itos)
len(itos) # Total number of unique characters across all names in the txt file

# build the dataset
block_size = 3 # context length: how many characters do we take to predict the next one?

def build_dataset(names):
  X, Y = [], []
  for w in names:

    #print(w)
    context = [0] * block_size
    for ch in w + '.':
      ix = stoi[ch]
      X.append(context)
      Y.append(ix)
      #print(''.join(itos[i] for i in context), '--->', itos[ix])
      context = context[1:] + [ix] # crop and append

  X = torch.tensor(X)
  Y = torch.tensor(Y)
  print(X.shape, Y.shape)
  return X, Y

import random
random.seed(42)
n1 = int(0.8*len(names))
n2 = int(0.9*len(names))

Xtr, Ytr = build_dataset(names[:n1])
Xdev, Ydev = build_dataset(names[n1:n2])
Xte, Yte = build_dataset(names[n2:])

g = torch.Generator().manual_seed(2147483647) # for reproducibility
C = torch.randn((1892, 10), generator=g)#the 1st number=the number of unique characters, the 2nd number=the number of dimension=embedding lookup table
W1 = torch.randn((30, 200), generator=g)#word matrix
b1 = torch.randn(200, generator=g)#bia, initialize ramdonly
W2 = torch.randn((200, 1892), generator=g)#the 2nd number=the number of unique characters
b2 = torch.randn(1892, generator=g)#the 1st number=the number of unique characters
parameters = [C, W1, b1, W2, b2]

sum(p.nelement() for p in parameters) # number of parameters in total

for p in parameters:
  p.requires_grad = True

lre = torch.linspace(-3, 0, 1000)
lrs = 10**lre

lri = []
lossi = []
stepi = []

#starts a loop that iterates over 200,000 training iterations
for i in range(200000):

  # minibatch construct
  ix = torch.randint(0, Xtr.shape[0], (32,))#32=the number of examples

  # forward pass
  emb = C[Xtr[ix]] # (32, 3, 2)
  h = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (32, 100)
  logits = h @ W2 + b2 # (32, 27)
  loss = F.cross_entropy(logits, Ytr[ix])
  #print(loss.item())

  # backward pass
  # resets the gradients of all model parameters to zero before performing the backward pass
  for p in parameters:
    p.grad = None
  loss.backward()

  # update
  #lr = lrs[i]
  lr = 0.1 if i < 100000 else 0.01 #sets the learning rate (lr) to 0.1 for the first 100,000 iterations and 0.01 for the remaining iterations
  for p in parameters:
    p.data += -lr * p.grad

  # track stats
  #lri.append(lre[i])
  stepi.append(i)
  lossi.append(loss.log10().item())

print(loss.item())

plt.plot(stepi, lossi)

# training loss
emb = C[Xtr] # (32, 3, 2)
h = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (32, 100)
logits = h @ W2 + b2 # (32, 27)
loss = F.cross_entropy(logits, Ytr)
loss

# validation loss
emb = C[Xdev] # (32, 3, 2)
h = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (32, 100)
logits = h @ W2 + b2 # (32, 27)
loss = F.cross_entropy(logits, Ydev)
loss

# test loss
emb = C[Xte] # (32, 3, 2)
h = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (32, 100)
logits = h @ W2 + b2 # (32, 27)
loss = F.cross_entropy(logits, Yte)
loss

# visualize dimensions 0 and 1 of the embedding matrix C for all characters
plt.rcParams['font.family'] = ['Noto Sans CJK TC']#Specify "思源黑體" as the font
plt.figure(figsize=(10,10))
plt.scatter(C[:,0].data, C[:,1].data, s=200, marker='H', color='g')
for i in range(C.shape[0]):
  if i in itos: # added to ensure that the index exists in the itos dictionary
    plt.text(C[i,0].item(), C[i,1].item(), itos[i], ha="center", va="center", color='white')
plt.grid('minor')

# sample from the model
g = torch.Generator().manual_seed(2147483647 + 10)

for _ in range(20):

    out = []
    context = [0] * block_size
    while True:
      emb = C[torch.tensor([context])] # (1,block_size,d)
      h = torch.tanh(emb.view(1, -1) @ W1 + b1)
      logits = h @ W2 + b2
      probs = F.softmax(logits, dim=1)
      ix = torch.multinomial(probs, num_samples=1, generator=g).item()
      context = context[1:] + [ix]
      out.append(ix)
      if ix == 0:
        break

    print(''.join(itos[i] for i in out))